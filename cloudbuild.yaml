options:
  env:
  # Provide information for cbif to reconstruct .git config.
  - COMMIT_SHA=$COMMIT_SHA
  - GIT_ORIGIN_URL=https://github.com/m-lab/siteinfo.git
  - PROJECT_ID=$PROJECT_ID

steps:

############################################################################
# RUN UNIT TESTS
############################################################################

- name: gcr.io/cloud-builders/docker
  args: [
    'build', '-t', 'python-env', '-f', 'Dockerfile.python', '.'
  ]

- name: python-env
  args: [
    'python3', '-m', 'unittest', 'discover', '-s', 'cmd/', '-p', '*_test.py'
  ]

# Import submodules to run jsonnet unit tests.
- name: gcr.io/$PROJECT_ID/gcloud-jsonnet-cbif
  args: [
    'git submodule update --init --recursive'
  ]

# Run jsonnet unit tests.
- name: gcr.io/$PROJECT_ID/gcloud-jsonnet-cbif
  args: [
    'make test VERSION=v1',
    'make test VERSION=v2'
  ]

############################################################################
# BUILD ARTIFACTS
############################################################################

# Generate v1 and v2 json files.
- name: gcr.io/$PROJECT_ID/gcloud-jsonnet-cbif
  args: [
    'make VERSION=v1',
    'make VERSION=v2'
  ]
  env:
   - 'PROJECT=${PROJECT_ID}'

############################################################################
# DEPLOY ARTIFACTS
############################################################################

# Publish new v1 data.
- name: gcr.io/cloud-builders/gsutil
  args: [
    '-h', 'Cache-Control:private, max-age=0, no-transform', '-m',
    'cp', '-r', '/workspace/output/v1/*', 'gs://siteinfo-$PROJECT_ID/v1/'
  ]

# Publish new v2 data.
- name: gcr.io/cloud-builders/gsutil
  args: [
    '-h', 'Cache-Control:private, max-age=0, no-transform', '-m',
    'cp', '-r', '/workspace/output/v2/*', 'gs://siteinfo-$PROJECT_ID/v2/'
  ]

# Copy v1 configs to archive.
- name: gcr.io/cloud-builders/gsutil
  args: [
    '-h', 'Cache-Control:private, max-age=0, no-transform', '-m',
    'cp', '-r', '/workspace/output/configs/v1/*', 'gs://siteinfo-$PROJECT_ID/configs/v1'
  ]

# Copy v2 configs to archive.
- name: gcr.io/cloud-builders/gsutil
  args: [
    '-h', 'Cache-Control:private, max-age=0, no-transform', '-m',
    'cp', '-r', '/workspace/output/configs/v2/*', 'gs://siteinfo-$PROJECT_ID/configs/v2'
  ]

############################################################################
# POST BUILD STEPS
############################################################################

# NOTE: The following remote Cloud Build trigger steps will not block this
# build. The steps do not wait for the remote build to finish, but merely start
# it.

# Trigger an epoxy-images stage1 build, which will build stage1 boot images for
# any new sites.
- name: gcr.io/${PROJECT_ID}/siteinfo-cbif
  env:
  - PROJECT_IN=mlab-staging,mlab-oti
  args: [
    '/go/bin/cbctl', '-project=$PROJECT_ID',
                     '-repo=epoxy-images',
                     '-trigger_name=epoxy-images-stage1',
                     'trigger'
  ]

# Trigger an epoxy-images stage3 build, which will build stage3 boot images for
# any new sites.
- name: gcr.io/${PROJECT_ID}/siteinfo-cbif
  env:
  - PROJECT_IN=mlab-staging,mlab-oti
  args: [
    '/go/bin/cbctl', '-project=$PROJECT_ID',
                     '-repo=epoxy-images',
                     '-trigger_name=epoxy-images-stage3',
                     'trigger'
  ]

# Trigger a switch-config build, which will build switch configurations for any
# new sites, and deploy them to GCS.
- name: gcr.io/${PROJECT_ID}/siteinfo-cbif
  env:
  - PROJECT_IN=mlab-staging,mlab-oti
  args: [
    '/go/bin/cbctl', '-project=$PROJECT_ID',
                     '-repo=switch-config',
                     '-trigger_name=switch-config',
                     'trigger'
  ]

# Deploy the primary measurement-lab.org zone to Cloud DNS.
- name: gcr.io/cloud-builders/gcloud
  entrypoint: '/bin/bash'
  args: [
    './deploy_dns.sh'
  ]
  env:
  - 'PROJECT=${PROJECT_ID}'
  - 'DOMAIN=measurement-lab.org'
  - 'ZONEFILE=measurement-lab.org.zone'

# Deploy the measurement-lab.org project subdomain zone to Cloud DNS
- name: gcr.io/cloud-builders/gcloud
  entrypoint: '/bin/bash'
  args: [
    './deploy_dns.sh'
  ]
  env:
  - 'PROJECT=${PROJECT_ID}'
  - 'DOMAIN=${PROJECT_ID}.measurement-lab.org'
  - 'ZONEFILE=${PROJECT_ID}.measurement-lab.org.zone'
