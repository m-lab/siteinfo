// NOTE: this format is not compatible with virtual sites, and anything
// consuming the output should only be considered to work reliably for physical
// sites. Virtual sites have a network configuration on a per-machine basis.
// Anything consuming this deprecated format should migrate to the v2 version,
// which returns one object per machine, not per site. This format is intended
// to work for early virtual sites and physical sites, allowing M-Lab time to
// migrate any consumer to the v2 version.
local sites = import 'sites.jsonnet';
// Early virtual sites only allowed a single machine, usually mlab1. This small
// function checks that the mlab1 machine exists, and if so, returns the network
// config for that machine, else it returns the network config for the first
// machine it finds. Physical sites ignore the value generated by this site.
local getMachine(site) = (
  if std.objectHas(site.machines, 'mlab1') then
    'mlab1'
  else
    std.objectFields(site.machines)[0]
);

{
  type: 'FeatureCollection',
  features: [
    {
      local location = site.location,
      type: 'Feature',
      geometry: {
        type: 'Point',
        coordinates: [location.longitude, location.latitude],
      },
      properties: {
        name: site.name,
        metro: location.metro,
        city: location.city,
        provider: site.transit.provider,
        uplink: site.transit.uplink,
        asn: site.transit.asn,
        ipv4_prefix: site.NetworkPrefix('v4', getMachine(site)),
        ipv6_prefix: site.NetworkPrefix('v6', getMachine(site)),
      },
    }
    for site in sites
  ],
}
