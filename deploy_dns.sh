#!/bin/bash

set -eux

_=${PROJECT:?Please provide PROJECT name in environment}

# Maximum percentage (in either direction) the RR count can change between
# deployments. As of this writing, adding or removing a single experiment can
# change the total record count by around 27%. As the number of experiments
# increases, this value can be made smaller.
MAX_PERCENT_RR_CHANGE="0.30"

# The maximum amount of time in seconds to wait for the zone file import
# operation to complete before exiting with an error.
MAX_IMPORT_WAIT="300"

SITEINFO_ZONE="/workspace/output/v1/zones/${PROJECT}.measurement-lab.org.zone"
SITEINFO_NORMALIZED="/workspace/siteinfo.normalized"

CLOUDDNS_ZONE="/workspace/clouddns.zone"
CLOUDDNS_ZONE_NAME="${PROJECT}-measurement-lab-org"
CLOUDDNS_NORMALIZED="/workspace/clouddns.normalized"

# Install bc for doing floating point math.
apt update
apt install -y bc

# The file current_dns_rr_count is generated by a previous build step.
CURRENT_DNS_RR_COUNT=$(cat /workspace/current_dns_rr_count)

grep '\bIN' "${SITEINFO_ZONE}" | \
    sed -e "s/^@/${PROJECT}.measurement-lab.org./" -e "s/[[:space:]]\+/ /g" | \
    sort > "${SITEINFO_NORMALIZED}"

NEW_DNS_RR_COUNT=$(cat "${SITEINFO_NORMALIZED}" | wc -l)

PERCENT_CHANGE=$(echo "scale=2; (${CURRENT_DNS_RR_COUNT} - ${NEW_DNS_RR_COUNT}) / ${CURRENT_DNS_RR_COUNT}" | bc)
ABS_PERCENT_CHANGE=$(echo "${PERCENT_CHANGE}" | sed -e 's/^-//')
PERCENT_CHANGE_RESULT=$(echo "${ABS_PERCENT_CHANGE} > ${MAX_PERCENT_RR_CHANGE}" | bc)

if [[ "${PERCENT_CHANGE_RESULT}" == "1" ]]; then
  echo "Maximum RR change percent exceeded. ${ABS_PERCENT_CHANGE} > ${MAX_PERCENT_RR_CHANGE}"
  exit 1
fi

# Deploy the zone to Cloud DNS
gcloud dns record-sets import "${SITEINFO_ZONE}" \
    --zone-file-format \
    --zone "${CLOUDDNS_ZONE_NAME}" \
    --delete-all-existing \
    --project "${PROJECT}"

# Wait until the import operation is complete before continuing.
count="0"
while true; do
  if [[ "${count}" -gt "${MAX_IMPORT_WAIT}" ]]; then
    echo "Zone file import to Cloud DNS is taking too long."
    exit 1
  fi
  status=$(
    gcloud dns record-sets changes list \
        --zone "${CLOUDDNS_ZONE_NAME}" \
        --sort-order descending \
        --limit 1 \
        --format 'value(status)' \
        --project "${PROJECT}"
  )
  if [[ "${status}" == "done" ]]; then
    break;
  fi
  sleep 5
  count=$(( count + 5 ))
done

# After the new zone has been imported, double check to be sure that an export
# of the zone _exactly_ matches the zone file we just imported. This step may
# be unnecessary or not useful, but it just one very small sanity check.
gcloud dns record-sets export ${CLOUDDNS_ZONE} \
    --zone ${PROJECT}-measurement-lab-org \
    --zone-file-format \
    --project ${PROJECT}
grep "\bIN" "${CLOUDDNS_ZONE}" | \
    sed -e "s/.${PROJECT}.measurement-lab.org.//" -e "s/\"//g" | \
    cut -d" " -f1,3,4,5 | \
    grep -Ev "(NS|SOA)" | \
    sort > "${CLOUDDNS_NORMALIZED}"

RR_DIFFS=$(comm -3 "${SITEINFO_NORMALIZED}" "${CLOUDDNS_NORMALIZED}")
if [[ -n "${RR_DIFFS}" ]]; then
  echo "siteinfo and Cloud DNS RRs differ."
  echo "{$RR_DIFFS}"
  exit 1
fi
